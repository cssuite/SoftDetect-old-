/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <hamsandwich>
#include <fakemeta>
#include <ColorChat>

#pragma ctrlchar '\'

#define get_bit(%1,%2) 		( %1 &   1 << ( %2 & 31 ) )
#define set_bit(%1,%2)	 	( %1 |=  ( 1 << ( %2 & 31 ) ) )
#define clear_bit(%1,%2)	( %1 &= ~( 1 << ( %2 & 31 ) ) )

#define MAX_STRING_LENGHT 32
#define NAME "name"
#define null 0

new const PREFIX[] = "SoftDetect"

new const PLUGIN[]  = "Soft Detect"
new const VERSION[] = "1.4"
new const AUTHOR[]  = "RevCrew"

enum  PLUGIN_CVARS
{
	CVAR_DP_ON,
	CVAR_DP_CVAR_PUNISH,
	
	CVAR_ANTI_STEAM,
	CVAR_ANTI_STEAM_TIME,
	CVAR_ANTI_STEAM_PUNISH
}

new g_Cvars[PLUGIN_CVARS]

// For Anti-Steam Changer
new Trie:g_trie_asc;
enum _:ArrayAsc
{
	ASC_STEAMID[24],
	ASC_IP[24],
	ASC_TIME
}

new Array:g_array_asc;
new g_total_asc = 0;
// End

new Array:g_check_cvar;

enum PlayerData
{
	AUTHID[22],
	IP[22]
}

new g_player_data[33][PlayerData]
new g_iSteam, g_iCurrCvar[33], g_iCheckCvarSize

enum _:UserData {
	PrevValue[MAX_STRING_LENGHT],
	NewValue[MAX_STRING_LENGHT]
};

static data[33][UserData];

public plugin_precache()
{
	Dir();
	
	new configsDir[64];
	get_configsdir(configsDir, 63);
	
	g_Cvars[CVAR_DP_ON] =				register_cvar("softdetect_dp_on", "1")
	g_Cvars[CVAR_DP_CVAR_PUNISH] = 			register_cvar("softdetect_dp_cvar_punish", "kick %userid% [SoftDetect]_Protector_Detected")
	
	g_Cvars[CVAR_ANTI_STEAM] = 			register_cvar("softdetect_anti_steam", "1")
	g_Cvars[CVAR_ANTI_STEAM_TIME] =			register_cvar("softdetect_anti_steam_time", "1440")
	g_Cvars[CVAR_ANTI_STEAM_PUNISH] =		register_cvar("softdetect_anti_steam_punish", "kick %userid% [SoftDetect]_ChangeSteamID")
	
	
	server_cmd("exec %s/SoftDetect.cfg", configsDir);
	server_exec()
}
public plugin_init() {
  
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_trie_asc=TrieCreate();
	g_array_asc=ArrayCreate(ArrayAsc);
	g_check_cvar = ArrayCreate(32);
	
	ASC_MainLoad()
	AP_MainLoad()
	
}
public plugin_end()
{
	ASC_Clear();
	ArrayDestroy(g_check_cvar);
}

public client_authorized(id)
{
	if(is_user_bot(id) || is_user_hltv(id))
		return;
	
	get_user_authid(id, g_player_data[id][AUTHID], 21)
	get_user_ip(id, g_player_data[id][IP], 21, 1)
	
	if(get_pcvar_num(g_Cvars[CVAR_ANTI_STEAM]))
		CheckASC(id)
		
	if(is_user_steam(id))	set_bit(g_iSteam, id)
	else			clear_bit(g_iSteam, id)
	
	g_iCurrCvar[id] = 0;
}

////////////////////////////////////////////////////////////////////
////////////////////////////// AntiProtector ///////////////////////
////////////////////////////////////////////////////////////////////
public AP_MainLoad()
{
	register_forward(FM_ClientUserInfoChanged, "forward_client_userinfochanged")
	RegisterHam(Ham_Spawn, "player", "player_spawn", true);
	
	new f = fopen("addons/amxmodx/configs/SoftDetect.ini", "r")
	
	if(!f)
		return;
		
	static filedata[64], bool:index=false;
	
	new const STR[] = "[CHECKCVARS]";
	new len = strlen(STR);
	while(!feof(f))
	{
		fgets(f, filedata, charsmax(filedata))
		
		if(!filedata[0] || filedata[0] == '#')
			continue;
			
		if(equal(filedata,STR,len))
		{
			index = !index;
			continue;
		}
		
		if(!index)
			continue;
		
		trim(filedata);
		
		ArrayPushString(g_check_cvar, filedata)
	}
	
	fclose(f);
	
	g_iCheckCvarSize = ArraySize(g_check_cvar)
}
public player_spawn(id) {
	
	if(!get_pcvar_num(g_Cvars[CVAR_DP_ON]) || !is_user_connected(id) || get_bit(g_iSteam, id))
		return HAM_IGNORED;

	if(g_iCurrCvar[id] > g_iCheckCvarSize - 1)
		return HAM_IGNORED;
	
	set_task(2.0, "StartCheck", id+333)
	return HAM_IGNORED;
}
public StartCheck(id)
{
	id-=333;
	static szData[32];
	ArrayGetString(g_check_cvar, g_iCurrCvar[id], szData, charsmax(szData))
	
	get_user_info(id, szData, data[id][PrevValue], MAX_STRING_LENGHT-1);
	
	num_to_str(get_systime(), data[id][NewValue], MAX_STRING_LENGHT-1);
	
	static dat[46];
	formatex(dat, 45, "setinfo %s \"%s\"", szData, data[id][NewValue])
	SVC_DIRECTOR_STUFFTEXT_CMD(dat, id);
	
	//client_cmd(id, "%s \"%s\"", szData, data[id][NewValue]);
		
	set_task(2.0, "CheckCvar", id+13331)
}
public CheckCvar(id) {
	
	id -=13331
	
	if(!is_user_connected(id))
		return PLUGIN_CONTINUE;
	
	static szData[32];
	ArrayGetString(g_check_cvar, g_iCurrCvar[id], szData, charsmax(szData))
	
	static currentValue[MAX_STRING_LENGHT];
	get_user_info(id, szData, currentValue, sizeof(currentValue));
	
	if (!equal(data[id][NewValue], currentValue) || (equali(szData,"name") && equali(currentValue,"name")))
		PunishAP(id,szData,data[id][PrevValue],data[id][NewValue], currentValue);
	else
	{
		static dat[46];
		formatex(dat, 45, "setinfo %s \"%s\"", szData, data[id][PrevValue])
		SVC_DIRECTOR_STUFFTEXT_CMD(dat, id);
	}
	
	// clear datas...
	data[id][PrevValue][null] = null;
	data[id][NewValue][null] = null;
	
	g_iCurrCvar[id] ++;
	return PLUGIN_CONTINUE;
}

PunishAP(id, const value[], const oldvalue[], const newvalue[], const required[])
{
	static cvar_cmd[64];
	get_pcvar_string(g_Cvars[CVAR_DP_CVAR_PUNISH], cvar_cmd, charsmax(cvar_cmd));
	
	static cmd[64];
	copy(cmd, charsmax(cmd), cvar_cmd)
				
	static uid[8];
	formatex(uid, charsmax(uid), "#%d", get_user_userid(id))
				
	replace_all(cmd, charsmax(cmd), "%userid%", uid)
	replace_all(cmd, charsmax(cmd), "%ip%", g_player_data[id][IP])
				
	new name[32];
	get_user_name(id, name, charsmax(name))
	PrintMessage("Player %s kicked by AntiProtector ( IP \"%s\" SteamID \"%s\" )[\"%s\": (Old:\"%s\") (New:\"%s\") (Required:\"%s\"]", \
	name,g_player_data[id][IP],g_player_data[id][AUTHID], value, oldvalue, required,newvalue)
				
	PrintMessage("[Execute CMD][%s] [CMD:%s]", name, cmd)
	server_cmd(cmd);
}
public forward_client_userinfochanged(id, buffer) {

	static oldname[32], newname[32]
	get_user_name(id, oldname, sizeof oldname - 1)
	engfunc(EngFunc_InfoKeyValue, buffer, NAME, newname, sizeof newname - 1)
	if (equal(newname, oldname))
		return FMRES_IGNORED

	return FMRES_SUPERCEDE
}
////////////////////////////////////////////////////////////////////
////////////////////////////// End ////////////////////////////
////////////////////////////////////////////////////////////////////
#define SVC_DIRECTOR_ID			51
#define SVC_DIRECTOR_STUFFTEXT_ID	10
stock SVC_DIRECTOR_STUFFTEXT_CMD( text[] , id = 0 ) {
 
        message_begin( MSG_ONE, SVC_DIRECTOR_ID, _, id )
        write_byte( strlen(text) + 2 )
        write_byte( SVC_DIRECTOR_STUFFTEXT_ID )
        write_string( text )
        message_end()
}
////////////////////////////////////////////////////////////////////
////////////////////////////// Anti Steam Changer //////////////////
////////////////////////////////////////////////////////////////////
CheckASC(const id)
{	
	static array_pos;
	static data[ArrayAsc];
	if(TrieGetCell(g_trie_asc, g_player_data[id][IP], array_pos))
	{
		
		ArrayGetArray(g_array_asc, array_pos, data)
		
		if( data[ASC_TIME] - get_systime(0) > 0 )
		{
			if( !equali(data[ASC_STEAMID],g_player_data[id][AUTHID]) )
			{
				static cvar_cmd[64];
				get_pcvar_string(g_Cvars[CVAR_ANTI_STEAM_PUNISH], cvar_cmd, charsmax(cvar_cmd));
	
				static cmd[64];
				copy(cmd, charsmax(cmd), cvar_cmd)
				
				static uid[8];
				formatex(uid, charsmax(uid), "#%d", get_user_userid(id))
				
				replace_all(cmd, charsmax(cmd), "%userid%", uid)
				replace_all(cmd, charsmax(cmd), "%ip%", g_player_data[id][IP])
				
				new name[32];
				get_user_name(id, name, charsmax(name))
				PrintMessage("Player %s kicked by ASC ( SteamID \"%s\" OldID \"%s\" IP \"%s\" Timeleft \"%d\" )", \
				name,g_player_data[id][AUTHID],data[ASC_STEAMID],g_player_data[id][IP],data[ASC_TIME] - get_systime(0))
				
				PrintMessage("[Execute CMD][%s] [CMD:%s]", name, cmd)
				server_cmd(cmd);
			}
			
			return;
		}
		
		
	}
	
	
	copy(data[ASC_STEAMID], charsmax(data[AUTHID]), g_player_data[id][AUTHID]);
	copy(data[ASC_IP], charsmax(data[AUTHID]), g_player_data[id][IP]);
	data[ASC_TIME] = get_systime(0)+60*get_pcvar_num(g_Cvars[CVAR_ANTI_STEAM_TIME]);
	
	ArrayPushArray(g_array_asc, data)
	TrieSetCell(g_trie_asc, g_player_data[id][IP], g_total_asc)
		
	g_total_asc++;
	
}

ASC_MainLoad()
{
	
	new file[64];
	
	get_datadir(file, charsmax(file))
	
	add(file, charsmax(file), "/ASC");
	
	if(!dir_exists(file))
		mkdir(file)
		
	new db_file[64];
	formatex(db_file, charsmax(db_file), "%s/player_db.asc", file)
	
	if(!file_exists(db_file))
	{
		fclose(fopen(db_file,"w"));
		return;
	}
		
	new f = fopen(db_file,"rt")
	
	if(!f)
	{
		PrintMessage("Can't open file [%s]", db_file)
		return;
	}
	
	static filedata[64], ip[24], authid[24], time[12]
	static data[ArrayAsc]
	while(!feof(f))
	{
		fgets(f, filedata, charsmax(filedata))
		
		if(!filedata[0])
			continue;
		// Format [IP] [TIME]	
		parse(filedata, ip, charsmax(ip), authid, charsmax(authid), time, charsmax(time))
		
		copy(data[ASC_STEAMID], charsmax(data[ASC_STEAMID]), authid);
		copy(data[ASC_IP], charsmax(data[ASC_IP]), ip);
		data[ASC_TIME] = str_to_num(time);

		ArrayPushArray(g_array_asc, data)
		TrieSetCell(g_trie_asc, ip, g_total_asc)
		
		g_total_asc++;
	}
	
	fclose(f);
}
ASC_Clear()
{
	
	new file[64];
	
	get_datadir(file, charsmax(file))
	add(file, charsmax(file), "/ASC");
		
	new db_file[64];
	formatex(db_file, charsmax(db_file), "%s/player_db.asc.temp", file)
	
	new f = fopen(db_file, "w");
	
	if(!f)
	{
		PrintMessage("Can't open file [%s]", db_file)
		return;
	}
		
	static data[ArrayAsc] 
	for(new i; i< ArraySize(g_array_asc); i++)
	{
		ArrayGetArray(g_array_asc, i, data);
		
		fprintf(f, "\"%s\" \"%s\" %d\n",data[ASC_IP],data[ASC_STEAMID],data[ASC_TIME]);
	}
	
	fclose(f)
	
	new db_file2[64];
	formatex(db_file2, charsmax(db_file2), "%s/player_db.asc", file)
	
	new TRUE = 0x1;
	
	while ( TRUE )	{ if(delete_file(db_file2)) break; }
	while ( TRUE )	{ if(rename_file(db_file, db_file2, 1)) break; }
	
	
	TrieDestroy(g_trie_asc);
	ArrayDestroy(g_array_asc);
}

////////////////////////////////////////////////////////////////////
////////////////////////////// End ////////////////////////////
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
////////////////////////////// Stock's ////////////////////////////
////////////////////////////////////////////////////////////////////
stock Dir()
{
	new dir[64]
	formatex(dir,charsmax(dir),"addons/amxmodx/logs/SoftDetect/")
	
	if(!dir_exists(dir))
		mkdir(dir);
}
stock PrintMessage(const szMessage[], any:...)
{
	static szMsg[196];
	vformat(szMsg, charsmax(szMsg), szMessage, 2);
	
	static LogDat[16],LogFile[64]
	get_time("%Y_%m_%d", LogDat, 15);
	
	get_basedir(LogFile,63)
	formatex(LogFile,63,"%s/logs/SoftDetect/Log_%s.log",LogFile,LogDat)
	log_to_file(LogFile,"[%s] %s",PREFIX,szMsg)
	
	return;
}
stock bool:is_user_steam(id)
{
// Author Sh0oter
        static dp_pointer
        if(dp_pointer || (dp_pointer = get_cvar_pointer("dp_r_id_provider")))
        {
            server_cmd("dp_clientinfo %d", id)
            server_exec()
            return (get_pcvar_num(dp_pointer) == 2) ? true : false
        }
        return false
}
////////////////////////////////////////////////////////////////////
////////////////////////////// End ////////////////////////////
////////////////////////////////////////////////////////////////////
